var fs = require('fs');

var moduleMap = module.exports.modules = require('./module-map.json');

function indent(code) {
	return "\t" + code.replace(/\n/g, "\n\t");
}

function generateExpression(map, conditions) {
	if (typeof map === 'string') {
		return 'require(' + JSON.stringify(map) + ')';
	}
	if (typeof conditions === 'object') {
		var result = '{';
		var entries = [];
		for (var key in conditions) {
			 if (typeof conditions[key] === 'string') {
				var entry = generateExpression(conditions[key]);
				entries.push(JSON.stringify(key) + ": " + entry);
			} else if (map[key] || typeof conditions[key] === 'object') {
				var entry = generateExpression(map[key] || {}, conditions[key]);
				entries.push(JSON.stringify(key) + ": " + entry);
			} else {
				throw new Error('Unrecognised module in map: ' + key);
			}
		}
		if (entries.length > 1) {
			return '{\n' + entries.map(indent).join(',\n') + '\n}';
		} else {
			return '{' + entries.join('') + '}';
		}
	} else {
		var newConditions = {};
		for (var key in map) {
			newConditions[key] = true;
		}
		return generateExpression(map, newConditions);
	}
}

var generateString = module.exports.generateString = function (conditions) {
	var expression = generateExpression(moduleMap, conditions || true);
	
	var code = "// Generated by ndarray-bundle (https://www.npmjs.org/package/ndarray-bundle)\n\n";
	code += 'var result = module.exports = require("ndarray");\n\n';
	code += "var modules = " + expression + ';\n\n';
	code += "for (var key in modules) {\n\tresult[key] = modules[key];\n}\n";
	return code;
};

var generateFile = module.exports.generateFile = function (outputFile, conditions) {
	var string = generateString(conditions);
	fs.writeFileSync(outputFile, string);
	return string;
};

if (require.main === module) {
	// Called from the command-line
	generateFile('ndarray-bundle.js');

	var moduleNames = [];
	
	var htmlFile = fs.readFileSync(__dirname + '/index.html', {encoding: 'utf-8'});
	var htmlParts = htmlFile.split('<!-- TEMPLATE -->');
	
	function mapToHtml(map) {
		var result = '<span class="js-formatting">{</span><ul>';
		var keys = Object.keys(map);
		keys.sort(function (a, b) {
			if (typeof map[a] === 'object' && typeof map[b] !== 'object') {
				return 1;
			}
			if (typeof map[b] === 'object' && typeof map[a] !== 'object') {
				return -1;
			}
			return (a.toLowerCase() < b.toLowerCase()) ? -1 : 1;
		});
		keys.forEach(function (key, index) {
			if (typeof map[key] === 'object') {
				result += '<li><span class="module-group">' + key + '</span><span class="js-formatting">: </span>';
			 
				result += mapToHtml(map[key]);
			} else {
				var moduleName = map[key];
				var moduleUrl = 'https://www.npmjs.org/package/' + encodeURIComponent(moduleName);
				result += '<li>' + key + ': ';
				result += '<a class="module-name" href="' + moduleUrl + '"><span class="js-formatting">"</span>' + moduleName + '<span class="js-formatting">"</span></a>';
				moduleNames.push(moduleName);
			}
			if (index < keys.length - 1) {
				result += '<span class="js-formatting comma">,';
			}
			result += '</li>';
		});
		result += '</ul><span class="js-formatting">}</span>';
		return result;
	}
	htmlParts[1] = mapToHtml(moduleMap);
	fs.writeFileSync(__dirname + '/index.html', htmlParts.join('<!-- TEMPLATE -->'));

	console.log(moduleNames.join(' '));
}